

Los siguiente metodos nos daran la posibilidad de personalizar al maximo nuestra apliacion y cada una de sus ventanas


=== iconify ===

Permite minimizar la ventana que le indiquemos, esto es util para por ejemplo minimizar una ventana padre cuando se habre una ventana hija. Lo mejor sera verlo con unos ejemplos.

- En este ejemplo usamos el metodo 'iconify' en un boton para minimizar la ventana cuando se haga click sobre el:

```
from Tkinter import *

root = Tk()
boton = Button(root, text="Minimizar", command=root.iconify)
boton.pack
root.mainloop()
```

- En este otro ejemplo creamos un boton que abre otra ventana y minimiza la ventana padre

```
from Tkinter import *

def funcion():
    otra_ventana = Toplevel(root)
    root.iconify()

root = Tk()
boton = Button(root, text="Abrir otra ventana", command=funcion)
boton.pack()
root.mainloop()
```

--------------------------------------------------------

=== deiconify ===

Al contrario de como vimos en 'iconify' que podiamos minimizar la ventana, con 'deiconify' podemos restaurar la ventana, como paso con 'iconify' veamoslo con unos ejemplos

- Esta es una variacion de uno de los ejemplos que ya habiamos visto, pero en este cuando hacemos click en el boton 'Minimizar' este se minimiza pero pasado 5 segundos se vuelve a restaurar la ventana.

```
from Tkinter import *
import time

def funcion():
    root.iconify()
    time.sleep(5)
    root.deiconify()

root = Tk()
boton = Button(root, text="Minimizar", command=funcion)
boton.pack()
root.mainloop()
```

--------------------------------------------------------

=== title ===

Permite indicar el titulo de la ventana. Podria decirse que este valor se hereda ya que si creamos una nueva ventana a traves de Toplevel esta tomaria el nombre de la ventana padre.

- Ejemplo:

```
root = Tk()
root.title("Bienvenido a Codigo Python")
root.mainloop()
```

[img/ejemplo_title.png]


- Heredando el titulo de la ventana padre:

```
root = Tk()
root.title("Bienvenido a Codigo Python")
otra_ventana = Toplevel(root)
root.mainloop()
```

[img/ejemplo_title02.png]


- Ejemplo de dos ventanas con titulos distintos:

```
root = Tk()
root.title("Bienvenido a")
otra_ventana = Toplevel(root)
otra_ventana.title("Codigo Python")
root.mainloop()
```

[img/ejemplo_title03.png]


--------------------------------------------------------

=== maxsize ===

Establece los valores maximos de la medida de la ventana, tanto su ancho como su alto.

Ejemplo:

```
root.geometry("300x300")
root.maxsize(width=400, height=400)
```

--------------------------------------------------------

=== minsize ===

Establece los valores minimos de la medida de la ventana, tanto su ancho como su alto.

Ejemplo:

```
root.geometry("300x300")
root.minsize(width=200, height=200)
```

--------------------------------------------------------

=== state ===

Podemos cambiar el estado en el que se encuentra la ventana a 'normal', 'iconic' o 'withdraw'. Con la opcion 'normal' la ventana se comporta normalmente apareciendo en la ventana, con la opcion 'iconic' obtenemos los mismos resultados que el metodo 'iconify()'  minimizando la ventana y por ultimo con 'withdraw' obtendremos como se imaginaran el mismo resultado que con 'withdraw' ocultando la ventana. La forma en que se declaran son las siguientes:

```
root.state(newstate="normal")
root.state(newstate="withdraw")
root.state(newstate="iconic")
```

Veamos un ejemplo de su uso y funcionamiento:

```
from Tkinter import *
import time

def funcion():
    root.state(newstate='withdraw')
    time.sleep(5)
    root.state(newstate='normal')

root = Tk()
boton = Button(root, text="Probando el metodo state", command=funcion)
boton.pack()
root.mainloop()
```

--------------------------------------------------------

=== resizable ===

Nos permite indicar que si la ventana debe o no poder redimensionarse ya sea en su ancho o el su alto, dandole a sus parametros 'width'(Ancho) y 'height' (Largo) los valores 'True' o 'False'. Con True habilitamos el redimencionamiento y con False los deshabilitamos. Si estamos usando a su ves los metodos 'minsize' y/o 'maxsize' el valor maximo al cual se pueda redimencionar dependera de estos dos metodos en caso de existir.

- Redimencionar solo el ancho:

``` root.resizable(width=True, height=False)

- Redimencionar solo el alto:

``` root.resizable(width=False, height=True)

- Bloquear el redimencionamiento de la ventana:

``` root.resizable(width=False, height=False)


--------------------------------------------------------

=== geometry ===

Este metodo es uno, junto con el resto (no hay que desmerecerer la funcion de ninguno :) ), muy importante ya que nos permitira indicar tanto el tamaño de la ventana como su posicion, esto nos permitira trabajar con varias ventanas de una forma mas prolija y agradable para el usuario si se planifican bien los objetivos y se utilizan las herrramientas adecuadas en este caso hablaremos de 'geometry'.

Para su utilizacion tenemos dos posibilidades una es indicar solo el tamaño de la ventana usando la siguiente forma

``` root.geometry("WxH")

o indicando ademas del tamaño de la ventana la posicion de la misma de la siguiente forma

``` root.geometry("WxH±X±Y")

Resumiendo la cadena que toma este metodo tiene esta forma:

wxh±x±y

Donde las letras tienen este significado:

- w: Ancho de la ventana en pixeles
- h: Alto de la ventana en pixeles
- x: Posicion en el eje X
- y: Posicion en el eje Y


El ancho y el alto deben ser reemplazados por las letras W y H respectivamente, separadas por una letra 'x' y su valor debera ser en pixeles, seguido de estos dos pueden ir de manera opcional dos valores mas que indicaran la posicion de la ventana en la pantalla donde se debera indicar estos valores, tambien en pixeles, para el eje x y el eje y. Una observacion que se debe hacer es que los valores que tome tanto el ancho como el alto de la ventana ademas de ser unicamente en pixeles deberan de ser numeros enteros positivos.

El significado del signo mas y menos indica que si se le pasa un valor positivo este sera contado desde la esquina superior izquierda de la pantalla en cambio si le pasamos un valor negativo este sera tomado en cuenta partiendo como origen desde la esquina inferior derecha; este es un detalle que hay que tener muy en cuenta cuando deseamos posicionar una ventana.


Un ejemplo de esto es el siguiente

```
#!/usr/bin/env python

from Tkinter import *

# Primer ventana con valores positivos
primer_ventana = Tk()
primer_ventana.geometry("300x300+0+0")
# A modo estetico le di un titulo
primer_ventana.title("Posicion x=+0 y=+0")
# Este tambien es estetico y no influye en el uso del metodo
etiqueta = Label(primer_ventana, text="Posicion x=+0 y=+0", width=100, height=100, anchor=CENTER)
etiqueta.pack()
primer_ventana.mainloop()

# Segunda ventana con valores negativos
segunda_ventana = Tk()
segunda_ventana.geometry("300x300-0-0")
segunda_ventana.title("Posicion x=-0 y=-0")
etiqueta = Label(segunda_ventana, text="Posicion x=-0 y=-0", width=100, height=100, anchor=CENTER)
etiqueta.pack()
segunda_ventana.mainloop()
```

Como se observa se crean dos ventanas donde a una se le pasa valores positivos y a la otra por el contrario sus valores seran negativos.

[img/ejemplo_geometry01.png]

% Usar root.winfo_screenwidth() y root.winfo_screenheight() para un ejemplo mas avanzado
% centrando una ventana en la pantalla

--------------------------------------------------------


=== withdraw ===

Este metodo permite ocultar una ventana; la forma que podemos usar para restaurarla es con 'deiconify()' o 'iconify()', o a traves del metodo 'state' que nos puede resultar mas comodo de usar. No se requiere de ningun argumento para funcionar como sucede tanto con 'deiconify' e 'iconify'.

``` root.withdraw()

Un ejemplo para ver como funciona es el siguiente:

```
#!/usr/bin/env python

from Tkinter import *
import time

def funcion():
    root.withdraw()
    time.sleep(5)
    root.deiconify()

root = Tk()
boton = Button(root, text="Probando el metodo state", command=funcion)
boton.pack()
root.mainloop()
```

--------------------------------------------------------


=== transient ===

Este método lo permite es hacer que una ventana permanezca siempre encima de otra, si la ventana padre se minimiza la ventana que lleva el método '.transient()' también lo hará y si esta ventana padre se cerrara la ventana hija también se cerraría.

Veamoslo con un ejemplo:

```
#!/usr/bin/env python

from Tkinter import *

root = Tk()
root.title("Ventana padre")
# Creamos una ventana hija de root
otra_ventana = Toplevel(root)
otra_ventana.title("Ventana hija")
# Este es solo para decoracion
etiqueta = Label(otra_ventana, text='Este es un ejemplo de transient')
etiqueta.pack()
# Posicionamos las dos ventanas para que sea mas claro el ejemplo
root.geometry("400x400+100+100")
otra_ventana.geometry("200x200+150+150")
# Y ahora si llamamos a este metodo
otra_ventana.transient(root)
root.mainloop()
```

Como ven si intentan mover la ventana padre observaran que esta permanece siempre debajo de la ventana hija.
