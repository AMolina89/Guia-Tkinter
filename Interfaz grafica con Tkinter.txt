Interfaz gráfica con Tkinter
Alejandro Alvarez [contacto@codigopython.com.ar]
Ultima modificación %%date(%d-%m-%Y)
%!target  : html
%!encoding: UTF-8
%!options: --toc

%%toc


Algo muy buscado en Python son las guías sobre interfaces gráficas ya sea PyGTK, PyQT, WxPython o TkInter entre las mas conocidas teniendo cada una sus ventajas y desventajas, así como cada una tiene facilidades y complicaciones en su uso y aplicación. En esta oportunidad le daré un espacio a TkInter como guía complementaria a la hecha por Sebastardo en [http://www.codigopython.com.ar/?p=139 http://www.codigopython.com.ar/?p=139], intentare ser lo mas lo mas claro posible sin pasarme por alto los pequeños detalles en lo que compone la creación de una interfaz gráfica en Python con el [toolkit #glosario] TkInter.

= Introducción =

== Acerca de Tk ==
[FIXME]

== Sobre esta guía ==
Dejo algunas observaciones sobre el tutorial, a lo largo del tutorial es posible que haga alusión a funciones o características de distribuciones GNU/Linux ya que es el sistema operativo que estoy utilizando durante el desarrollo de esta guía, aunque esto no influye en el objetivo de la guía ya que Python es multiplataforma al igual que TkInter.
Para los que deseen colaborar con esta guía así como en su contenido, pueden hacerlo registrándose en la [Wiki http://wiki.codigopython.com.ar/registro]

= Empezando por lo básico =

Lo primero que debemos hacer al igual que con otros módulos es que debemos importarlo para poder comenzar a utilizarlo, y al igual que con otros módulos tenemos dos formas de hacerlo

La primera y mas utilizada:

``` from Tkinter import *

Y la segunda y menos usada:

``` import Tkinter

: **NOTA**
En las versiones 3.x de Python el modulo Tk se debe llamar de esta forma //"from tkinter import *"// y no de esta forma //"from Tkinter import *"// es un cambio menor que hay que tener en cuenta si están trabajando con Python 3.


La diferencia entre usar la primera y segunda forma es la misma con la que nos podemos topar a la hora de importar un modulo en Python, para verlo si volvemos al articulo ["Pausa entre comandos y acciones" http://wiki.codigopython.com.ar/eliluminado:pausa-entre-comandos-y-acciones] mostré esta diferencia utilizando al modulo //'time'// y para hacerlo use el siguiente ejemplo:

```
import time
time.sleep(10)
```

```
from time import sleep
sleep(10)
```

Usando la forma //"import Tkinter"// cada vez que utilicemos una función del este modulo tendremos que anteponer la palabra //'Tkinter'//, en cambio usando la segunda forma //"from Tkinter import *"// simplemente deberemos usar el nombre de la función sin el nombre del modulo.

Por ahora a modo de tutorial utilizaremos la primer forma pero esto queda a su desicion, ahora si retomemos la guía.

Una observación que haré antes de continuar es no debemos pasa por alto la posibilidad de que el usuario no tenga instalado las librerías de TkInter y en consecuencia nuestra aplicación no podrá funcionar, lo mejor en este caso como en muchos otros es anticiparnos a los posibles errores que puedan ir surgiendo y manejar las excepciones de la siguiente forma:

```
try:
    from Tkinter import *
except ImportError:
    raise ImportError,"Se requiere el modulo Tkinter"
```

De esta forma en caso de que el potencial usuario de nuestra preciada aplicación pueda saber cual es motivo (en el caso de que no tenga instalado Tkinter) por el cual no pudo ejecutarla.


Una vez importado el modulo 'Tkinter' correctamente podemos utilizarlo para crear nuestra primera ventana de la siguiente forma:

```
root = Tk()
root.mainloop()
```

Esas dos lineas son fundamentales, ya que dentro de ellas ira gran parte del contenido así como la interfaz como pueden ser botones y menús, etc.. En la primera linea se crea un identificador que sera el que utilizaremos para referirnos a la ventana, en este caso lo llamamos 'root' y es una de las funciones mas importantes de Tkinter. Siempre que iniciamos un identificador en este caso lo llamamos 'root' debemos cerrarlo y todo lo contenido entre estas lineas serán parte del código de nuestra interfaz.[FIXME]

: **NOTA**
La variable 'root' usada para nombrar al identificador puede ser reemplazada por cualquier otro nombre siempre y cuando se respeten las palabras reservadas de Python (Para mas información entrar aquí [Palabras reservadas en Python http://wiki.codigopython.com.ar/eliluminado:nombres-de-variables-y-palabras-reservadas]) aunque es muy utilizado usar el nombre 'root' para la ventana principal y puede ser una buena practica para que resulte mas familiar a los demás programadores que se quieran unir al desarrollo de nuestra aplicación.


Con esto ya tendremos una ventana vacía que nos servirá para comenzar a trabajar, a partir de ahora iré ampliando esta guía mostrando los distintos [widgets #glosario] con los que contamos en TkInter y luego para finalizar crearemos un ejemplo sencillo para unir lo se vio a lo largo de esta guía.

= Widgets =

En esta sección de la guía no nos centraremos en el posicionamiento y diseño de los elementos que compondrán nuestra interfaz gráfica lo dejaremos para la siguiente sección ["Gestión del diseño" #gestion] en donde se vera mas detenidamente este asunto.

== Etiquetas [Label] ==

Para comenzar a llenar esa vacía ventana que acabamos de crear vamos a nombrar a las etiquetas o mas conocidas como //'label'// por su nombre en ingles, las podemos encontrar desde interfaces gráficas hasta en formularios en HTML y son sumamente útiles en la construcción de interfaces y formularios, al igual que cuando creamos nuestra ventana vacía declarándola de la siguiente forma //"root = Tk()"// tendremos que hacerlo con nuestra etiqueta, para esto necesitamos escoger un nombre en mi caso escogeré **"etiqueta"** para declararla y deberemos llamar al widget "Label" en vez de la función "Tk" como habíamos hechos anteriormente, como para orientarnos con lo ya visto quedando por ahora algo así:

``` etiqueta = Label()

Una vez creada la estructura básica de la etiqueta tendremos que llenar esa paréntesis vacío, primero tendremos que indicar a donde pertenece ese 'label' indicando el identificador de la ventana que en nuestro caso es 'root', separado por una coma escribiremos lo siguiente **text=** en donde seguido del signo igual incluiremos el texto que deseamos que incluya la etiqueta la cual puede ser un texto (que tendremos que encerrar entre comillas al igual que cuando usamos la sentencia print) o una variable que contenga al texto. Para verlo un poco mas claro juntemos todo en dos ejemplos uno donde muestre un texto fijo que le indiquemos a la etiqueta y otro usando una variable

- **Ejemplo numero 1**:
```
etiqueta = Label(root, text="Codigo Python")
```

- **Ejemplo numero 2**:
```
import getpass
texto = "Bienvenido %s a Codigo Python" % getpass.getuser()
etiqueta_2 = Label(root, text=texto)
```


Expliquemos los dos ejemplos, en el primero usamos un texto fijo no dinámico para utilizar como valor de la etiqueta en cambio en el segundo estamos usando una variable en donde su valor varia dependiendo de la salida que tenga la función //'getpass.getuser()'// que obtiene el nombre de usuario que tengamos en nuestra PC, como podemos observar su funcionamiento no varia mucho de lo que nos tiene acostumbrados Python, así que si manejarnos con Tkinter es solamente aprendernos un par de nombres de sus widgets como para poder empezar a utilizarlo.

Pero (siempre hay un pero) antes de poder ejecutar este ejemplo en nuestra consola tendremos que declarar este widget en nuestra ventana dándole una ubicación en la misma sino hacemos esto nuestra etiqueta simplemente no aparecerá en nuestra ventana, para hacerlo tenemos dos formas (Esto se vera mas detenidamente mas adelante) una es usando **'pack'** y la otra **' grid'**. Como esto se vera mas adelante haré una breve síntesis de los dos:

- 'pack': [FIXME]

- 'grid': [FIXME]


Como en este ejemplo solo colocaremos una etiqueta no es necesario recurrir al uso de 'grid' para posicionarlo, así que usaremos 'pack' en su lugar. Pero lo mas importante es saber como se declara esta etiqueta en nuestra ventana y poder ver nuestro primer widget en funcionamiento, para lograr esto deberemos usar la siguiente forma:

``` etiqueta.pack()

Como vemos es muy simple solo debemos usar el nombre que utilizamos para declarar nuestra etiqueta seguida de la forma que vayamos a utilizar para posicionarla, pero para los que no desean esperar a leer la siguiente sección para ver como se utiliza 'grid' les dejo la misma etiqueta pero posicionándola con 'grid' en lugar de usar 'pack' como ya lo habíamos visto:

``` etiqueta.grid(row=1, column=1)

Como se puede observar esta otra forma debimos indicarle dos parámetros que sirven para especificar la posición del widget, en este caso nuestra etiqueta. El primer parámetro es //'row'// que se traduce como fila al español y el segundo es //'column'// o columna en español con ellos podemos indicar en que columna y fila deberá colocarse el widget, aunque por ahora no profundizaremos entrando en detalles en la forma que trabaja cada uno ni todos los parámetros que acepta cada una.

Si ahora escribiéramos todo lo que vimos en nuestra consola tendríamos que ver nuestra primera etiqueta en funcionamiento, contenido dentro de una ventana, quedando todo el código como el siguiente:

```
>>> from Tkinter import *
>>> root = Tk()
>>> etiqueta = Label(root, text="Codigo Python")
>>> etiqueta.pack()
>>> root.mainloop()
```

Y así es como quedara nuestro ejemplo terminado:

[img/ejemplo_Label.png]

Habiendo ya escrito esas lineas se da por finalizada la muestra de este primer widget y podemos seguir con la guía.


== Botones [Button] ==

Los botones pueden contener texto o imágenes y se les puede asociar funciones o métodos, que al hacer clic sobre ellos Tkinter se encargara de llamar automáticamente a ese método o función y se ejecutara el código Python contenido dentro de ellos.

Un detalle es que solo puede utilizarse un tipo de fuente, pero ese texto puede ocupar varias lineas en caso de ser necesario. Además se puede subrayar el texto, un carácter o letra en particular, algo que es muy común cuando se desea decirle al usuario sobre la existencia de un atajo con el teclado.

Antes de crear a ese botón debemos declarar la función a la cual se llamara, porque como se imaginaran no podemos decirle al botón que ejecute una función que aun no existe, por eso vamos a escribir un par de lineas y crearemos una función simple como para verificar que dicho botón funciona correctamente.

```
def función():
    print "Excelente"
```

Con esas dos lineas nos va a servir para demostrar su funcionamiento, ahora si vamos con el botón.

A continuación les muestro el código con el cual vamos a trabajar:

```
from Tkinter import *

def función():
   print "Excelente"

root = Tk()
botón = Button(root, text="Que te parece la guía?", command=función)
botón.pack()
root.mainloop()
```

En el se observa la ya conocida importación del modulo Tkinter, la función que ya habíamos declarado y la creación del botón. Como se puede ver la creación de un botón básico es muy similar al de una etiqueta pero se incluye un parámetro mas que nos dará la posibilidad de especificar dentro de el la función que utilizaremos; el parámetro mencionado es **'command'** y en ella podemos llamar a funciones o métodos, en este caso llamamos a la función 'función' que va a imprimir en la consola la palabra //'Excelente'//.


[img/ejemplo_Button.png]

[img/ejemplo_Button02.png]


== Cuadro de texto [Entry] ==

% http://www.librosweb.es/xhtml/capitulo8/elementos_de_formulario.html
% http://www.pythonware.com/library/tkinter/introduction/entry.htm

Este widget nos permite tanto mostrarle información al usuario como también obtener información de su parte, dotando a nuestra ventana de un widget


Para escribir varias lineas de texto utilice el widget 'Text'


== Opciones ==

%!include: Options.t2t



= Gestión del diseño =[gestion]

== Gestión de la geometría ==
=== pack ===
=== grid ===
=== place ===

== Frame ==

Aquí veremos a 'Frame' no solo como un widget mas sino como una forma de ordenar el diseño de nuestra aplicación


== minsize ==

== Colores ==

Todos los widgets estandar de Tkinter proporcionan un conjunto basico de opciones para poder personalizarlos, que nos permiten modificar sus colores, fuentes, bordes y tamaños entre otros. La mayoria de ellos permite especificar un color de fondo y de primer plano que nos seran muy utiles cuando intentemos darle un aspecto mas pulida a nuestra aplicacion.

Para especificar dichos colores tenemos dos formas una es utilizar el nombre del color o especificar la proporcion de rojo, verde y azul que componen a dicho color en digitos hexadecimales que es la mas popular y la mas precisa a la hora de trabajar.

=== Nombres de colores ===

Como se habia mencionado se puede especificar un color con solo usar su nombre en ingles, por ejemplo para el color balco usariamos la palabra 'white' y para el color rojo 'red', aunque Tkinter no nos limita a usar solamente los colores basicos sino que nos ofrece una paleta bastante amplia de colores.

Les dejo dos ejemplos para que puedan observarlo en funcionamiento:

``` boton = Button(root, text="Que te parece la guia?", command=funcion, background="red")

[img/ejemplo_colores_red.png]

``` boton = Button(root, text="Que te parece la guia?", command=funcion, background="CadetBlue")

[img/ejemplo_colores_CadetBlue.png]


Otra de las posibilidades que tenemos es utilizar los colores del sistema para conseguir un aspecto mas acorde a la plataforma con que estemos trabajando.

Podemos obtener una lista de los posibles colores que nos da Tkinter en la siguiente pagina:
[http://www.tcl.tk/man/tcl8.5/TkCmd/colors.htm]

=== RGB hexadecimal ===

Aunque este metodo sea un poco mas complicado en su uso es el mas preciso que el metodo que habiamos mencionado arriba, la forma en que se utiliza es la siguiente:

#RRGGBB

Donde RR, GG y BB son representaciones hexadecimales de los colores rojo, verde y azul, respectivamente. Para formar un color debemos en primer lugar elegir la intensidad que deseamos usar, especificando la cantidad de rojo, verde y azul en una escala del 0 al 255.

Usando la siguiente linea desde la consola de Python podemos crear nuestros colores para Tkinter reemplazando los valores de la tupla por los que deseamos utilizar:

color_rgb = "#%02x%02x%02x" % (0, 100, 0)

== Fuentes ==

== Unidades de medida ==

En Tkinter podemos especificar las medidas de los elementos no solo en píxeles sino que también podemos especificar los valores en centímetros, pulgadas, milímetros y puntos para esto debemos pasar el valor como cadena que se compone de un numero entero o no seguido de una letra que indique el tipo de unidad a utilizar que se especifica en la siguiente tabla:


|| Símbolo | Descripción ||
|     c    | Centímetros |
|     i    | Pulgadas |
|     m    | Milímetros |
|     p    | Puntos de impresora (alrededor de 0.35mm) |

Si el valor que se pasa es un numero entero este es considerado como un valor en píxeles

Ejemplos:


- Píxeles:

``` boton = Button(root, text="Hola Mundo!!!", borderwidth=10)

[img/ejemplo_unidad_pixeles.png]

- Centímetros:

``` boton = Button(root, text="Hola Mundo!!!", borderwidth='1c')

[img/ejemplo_unidad_centimetros.png]

- Pulgadas:

``` boton = Button(root, text="Hola Mundo!!!", borderwidth='0.5i')

[img/ejemplo_unidad_pulgadas.png]

- Milímetros:

``` boton = Button(root, text="Hola Mundo!!!", borderwidth='10m')

[img/ejemplo_unidad_milimetros.png]

- Puntos:

``` boton = Button(root, text="Hola Mundo!!!", borderwidth='10p')

[img/ejemplo_unidad_puntos.png]


== Imágenes ==
=== PhotoImage ===
=== PIL ===

= Menús y barras de herramientas =


= Ventanas de diálogos =


= Eventos =


= Ejemplos =


= Notas finales =


= Enlaces de interés =

http://www.tcl.tk/man/tcl8.5/

http://www.codigopython.com.ar/miniguias/entorno-grafico-en-python

http://mundogeek.net/archivos/2008/11/24/interfaces-gráficas-de-usuario-en-python/

http://foro.elhacker.net/scripting/python_curso_de_python_con_interfaces_gráficas_tk-t232514.0.html

http://www.java2s.com/Code/Python/GUI-Tk/CatalogGUI-Tk.htm

http://www.ferg.org/thinking_in_tkinter/all_programs.html

http://www.pythonware.com/library/tkinter/introduction/label.htm

http://infohost.nmt.edu/tcc/help/pubs/tkinter/index.html


= Glosario =[glosario]

: toolkit


: widgets


= Licencia =

: Esta obra está licenciada bajo una Licencia Attribution-ShareAlike 3.0 Unported de Creative Commons. Para ver una copia de esta licencia, visite [http://creativecommons.org/licenses/by-sa/3.0/ http://creativecommons.org/licenses/by-sa/3.0/] o envíenos una carta a Creative Commons, 171 Second Street, Suite 300, San Francisco, California, 94105, USA.
